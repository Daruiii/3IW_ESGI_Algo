=== ANALYSE DES RÉSULTATS ===
Projet : Analyse de Performance d'Algorithmes
Tri et Recherche sur données immobilières
David - 3IW ESGI

=== Questions sur les TRIS ===

1. Y a-t-il une différence de performance entre trier par prix vs trier par surface ? Laquelle et pourquoi ?

OUI, il y a une différence notable entre trier par prix et par surface :

- Pour le tri par INSERTION : 
  * Prix (1000 éléments) : 252,919 comparaisons
  * Surface (1000 éléments) : 241,162 comparaisons
  
- Pour le tri RAPIDE :
  * Prix (1000 éléments) : 12,854 comparaisons
  * Surface (1000 éléments) : 21,264 comparaisons

EXPLICATION : Cette différence vient de la distribution des données :
- Les prix immobiliers ont une distribution plus étalée (de 180,000€ à 450,000€+)
- Les surfaces sont plus concentrées (de 45m² à 120m²)
- Le tri par insertion est plus efficace sur les surfaces car les données sont plus "ordonnées"
- Le tri rapide est plus efficace sur les prix car la distribution est plus uniforme

2. Quel algorithme de tri est le plus rapide sur 1000 biens immobiliers ? Le classement change-t-il selon le critère (prix/surface) ?

ALGORITHME LE PLUS RAPIDE : TRI RAPIDE

Classement par temps d'exécution (1000 éléments) :

Pour les PRIX :
1. Tri RAPIDE : 0.0038s
2. Tri FUSION : 0.0061s
3. Tri SÉLECTION : 0.0761s
4. Tri INSERTION : 0.0726s

Pour la SURFACE :
1. Tri FUSION : 0.0093s
2. Tri RAPIDE : 0.0115s
3. Tri INSERTION : 0.0653s
4. Tri SÉLECTION : 0.0681s

OUI, le classement change ! Le tri rapide est optimal pour les prix, mais le tri fusion devient meilleur pour les surfaces. Cela s'explique par la nature des données et la stabilité du tri fusion.

3. Le tri fusion est-il plus stable que le tri rapide pour les données immobilières ? Observez plusieurs exécutions.

OUI, le tri fusion est plus stable que le tri rapide :

STABILITÉ DES PERFORMANCES :
- Tri FUSION : Performance constante O(n log n) - toujours autour de 8,700 comparaisons
- Tri RAPIDE : Performance variable selon les données - de 4,578 à 21,264 comparaisons

Le tri fusion garantit toujours O(n log n) comparaisons, tandis que le tri rapide peut varier énormément selon le choix du pivot et la distribution des données. Sur des données immobilières réelles, cette stabilité est importante.

4. Pour trier 10 000 annonces immobilières par prix, quel algorithme recommanderiez-vous et pourquoi ?

RECOMMANDATION : TRI FUSION

JUSTIFICATION :
- Complexité garantie O(n log n) même dans le pire cas
- Stable et prévisible en performance
- Bien adapté aux données immobilières (souvent partiellement triées)
- Résistant aux données adverses

Pour 10,000 éléments :
- Tri FUSION : ~133,000 comparaisons estimées (stable)
- Tri RAPIDE : Entre 40,000 et 1,000,000 comparaisons (selon les données)

Dans un contexte professionnel, la prévisibilité est cruciale.

5. Avez-vous observé des différences significatives entre O(n²) et O(n log n) sur vos données réelles ?

OUI, les différences sont TRÈS significatives :

ALGORITHMES O(n²) - 1000 éléments :
- Tri SÉLECTION : 498,501 comparaisons
- Tri INSERTION : 252,919 comparaisons

ALGORITHMES O(n log n) - 1000 éléments :
- Tri FUSION : 8,722 comparaisons
- Tri RAPIDE : 12,854 comparaisons

RATIO DE PERFORMANCE : Les algorithmes O(n log n) sont 20 à 50 fois plus rapides !

Cette différence s'accentue avec la taille :
- 100 éléments : facteur 10
- 1000 éléments : facteur 25-50
- 10000 éléments : facteur 100+

=== Questions sur les RECHERCHES ===

6. Combien de maisons à Paris avez-vous trouvées dans 500 vs 1000 éléments ? Y a-t-il une différence de temps proportionnelle ?

RÉSULTATS :
- 500 éléments : 10 maisons trouvées en 0.0004s (500 comparaisons)
- 1000 éléments : 17 maisons trouvées en 0.0008s (999 comparaisons)

PROPORTIONNALITÉ : OUI, parfaitement proportionnelle !
- Temps doublé (0.0004s → 0.0008s)
- Comparaisons doublées (500 → 999)
- Résultats cohérents (10 → 17 maisons)

Cela confirme la complexité O(n) de la recherche linéaire.

7. La recherche binaire du prix 350000€ est-elle plus rapide que la recherche linéaire ? Par quel facteur ?

OUI, la recherche binaire est BEAUCOUP plus rapide :

COMPARAISON (1000 éléments) :
- Recherche BINAIRE : 13 comparaisons
- Recherche LINÉAIRE : ~500 comparaisons (moyenne)

FACTEUR D'AMÉLIORATION : 38 fois plus rapide !

Pour 1000 éléments :
- Binaire : log₂(1000) ≈ 10 comparaisons
- Linéaire : n/2 ≈ 500 comparaisons

Ce facteur augmente avec la taille des données.

8. Quels sont les prix au m² min/max que vous avez trouvés ? Dans quelles villes ?

RÉSULTATS PRIX AU M² :
- 500 éléments : Min 985€/m² - Max 12,777€/m²
- 1000 éléments : Min 985€/m² - Max 13,785€/m²

OBSERVATION : Les prix varient énormément selon les villes !
- Prix bas (985€/m²) : Probablement en province
- Prix élevés (13,785€/m²) : Probablement Paris ou grandes métropoles

Cette variation reflète la réalité du marché immobilier français.

9. Pour compter tous les appartements 3 pièces, pourquoi la recherche binaire n'est-elle pas adaptée ?

La recherche binaire N'EST PAS adaptée car :

LIMITATIONS :
1. CRITÈRES MULTIPLES : Il faut vérifier type_local ET nb_pieces
2. OCCURRENCES MULTIPLES : Il faut compter TOUS les appartements 3P, pas juste en trouver un
3. DONNÉES NON TRIÉES : Les données ne sont pas triées par (type_local, nb_pieces)

SOLUTION APPROPRIÉE : Recherche linéaire
- Parcourt tous les éléments
- Vérifie chaque critère
- Compte toutes les occurrences
- Résultats : 60 (sur 500) et 91 (sur 1000) appartements 3P

La recherche binaire est optimale pour trouver UNE valeur dans un tableau trié, pas pour compter des occurrences multiples.

=== Question de RÉFLEXION ===

10. Si vous créiez un site immobilier, quels algorithmes utiliseriez-vous pour :

- Trier les annonces par prix croissant :
  ALGORITHME : TRI FUSION
  JUSTIFICATION : Stabilité, performance O(n log n) garantie, bon pour les mises à jour fréquentes

- Rechercher par ville :
  ALGORITHME : INDEX + RECHERCHE BINAIRE
  JUSTIFICATION : Créer un index trié par ville, puis recherche binaire O(log n)

- Filtrer par nombre de pièces :
  ALGORITHME : RECHERCHE LINÉAIRE avec INDEX
  JUSTIFICATION : Index par nb_pieces, puis recherche linéaire dans chaque sous-ensemble

- Afficher les biens les plus chers/moins chers :
  ALGORITHME : RECHERCHE MIN/MAX optimisée
  JUSTIFICATION : Un seul parcours O(n), très efficace pour les extremums

ARCHITECTURE RECOMMANDÉE :
- Base de données avec index sur (prix, ville, nb_pieces)
- Tri fusion pour l'affichage en temps réel
- Cache des résultats fréquents
- Recherche binaire sur les index
- Min/Max pré-calculés et mis à jour

Cette approche garantit une expérience utilisateur fluide même avec des milliers d'annonces.

=== CONCLUSION ===

Ce projet a démontré l'importance cruciale du choix algorithmique :
- Les algorithmes O(n²) deviennent impraticables au-delà de 1000 éléments
- Les algorithmes O(n log n) sont indispensables pour les applications réelles
- La recherche binaire transforme complètement les performances
- Le contexte métier (immobilier) influence le choix des algorithmes

Les données immobilières réelles ont confirmé les prédictions théoriques tout en révélant l'impact des facteurs pratiques (distribution des données, stabilité, etc.).
